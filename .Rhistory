round(accuracy(train.lin$fitted, Housing.ts), 3)
## FIT REGRESSION MODEL WITH EXPONENTIAL TREND: MODEL 2.
## FORECAST AND PLOT DATA, AND MEASURE ACCURACY.
# Use tslm() function to create regression model with exponential trend.
# If lambda = 0, tslm function applies Box-Cox transformation
# for log(y) - exponential trend.
# If lambda = 1, tslm function will just have a linear trend
# (the same as the original regression with linear trend, train.lin).
train.expo <- tslm(train.ts ~ trend, lambda = 0)
# See summary of exponential trend model and associated parameters.
summary(train.expo)
# Apply forecast() function to make forecast using exponential
# trend for validation period.
train.expo.pred <- forecast(train.expo, h = nValid, level = 0)
# Plot ts data, exponential and linear trends, and
# respective forecasts for validation period.
plot(train.expo.pred,
xlab = "Time", ylab = "Housing starts (in 000s)", ylim = c(100, 3000), bty = "l",
xlim = c(1959, 2025), main = "Linear and Exponential Regression Trends")
axis(0, at = seq(1959, 2025, 1), labels = format(seq(1959, 2025, 1)))
lines(train.expo.pred$fitted, col = "blue", lwd = 2)
lines(train.lin.pred$fitted, col = "brown", lwd = 2, lty = 3)
lines(train.lin.pred$mean, col = "brown", lwd = 2, lty = 3)
lines(valid.ts, col = "black", lty = 1)
lines(train.ts, col = "black", lty = 1)
legend(2000,3300, legend = c("Housing starts Time Series",
"Exponentail Trend for Training and Validdation Data",
"Linear Trend for Training and Validation Data"),
col = c("black", "blue" , "brown"),
lty = c(1, 1, 3), lwd =c(2, 2, 2), bty = "n")
#accuracy on validation data
round(accuracy(train.expo.pred, valid.ts), 3)
#accuracy on entire dataset
round(accuracy(train.expo$fitted, Housing.ts), 3)
## FIT REGRESSION MODEL WITH QUADRATIC (POLYNOMIAL) TREND: MODEL 3.
## FORECAST AND PLOT DATA, AND MEASURE ACCURACY.
# Use tslm() function to create quadratic (polynomial) trend model.
train.quad <- tslm(train.ts ~ trend + I(trend^2))
# See summary of quadratic trend model and associated parameters.
summary(train.quad)
# Apply forecast() function to make predictions for ts data in
# validation set.
train.quad.pred <- forecast(train.quad, h = nValid, level = 0)
# Plot ts data, regression with quadratic trend and forecast for validation period.
plot(train.quad.pred,
xlab = "Time", ylab = "Housing starts (in 000s)", ylim = c(100, 3000), bty = "l",
xlim = c(1959, 2025), main = "Quadratic Trend for Training and Validation Data",
flty = 2)
axis(1, at = seq(1959, 2025, 1), labels = format(seq(1959, 2025, 1)) )
lines(train.quad.pred$fitted, col = "blue", lwd = 2)
lines(valid.ts, col = "black", lty = 1)
legend(2000,3300, legend = c("Housing starts Time Series", "Quadratic Trend for Training Data",
"Quadratic Forecast for Validation Data"),
col = c("black", "blue" , "blue"),
lty = c(1, 1, 5), lwd =c(2, 2, 2), bty = "n")
# Use accuracy() function to identify common accuracy measures
round(accuracy(train.quad.pred, valid.ts), 3)
#Accuracy on entire data set
round(accuracy(train.quad$fitted, Housing.ts), 3)
## FIT REGRESSION MODEL WITH SEASONALITY: MODEL 4.
## FORECAST AND PLOT DATA, AND MEASURE ACCURACY.
# Use tslm() function to create seasonal model.
train.season <- tslm(train.ts ~ season)
# See summary of seasonal model and associated parameters.
summary(train.season)
# Apply forecast() function to make predictions for ts with
# seasonality data in validation set.
train.season.pred <- forecast(train.season, h = nValid, level = 0)
# Plot ts data, regression model with seasonality, and forecast for validation period.
plot(train.season.pred,
xlab = "Time", ylab = "Housing starts (in 000s)", ylim = c(100, 3000), bty = "l",
xlim = c(1959, 2025), main = "Model with Seasonality for Training and Validation Data",
flty = 5)
axis(1, at = seq(1959, 2025, 1), labels = format(seq(1959, 2025, 1)))
lines(train.season.pred$fitted, col = "blue", lwd = 2)
lines(valid.ts, col = "black", lty = 1)
legend(2000,3300, legend = c("Housing starts Time Series", "Seasonality Model for Training Data",
"Seasonality Forecast for Validation Data"),
col = c("black", "blue" , "blue"),
lty = c(1, 1, 5), lwd =c(2, 2, 2), bty = "n")
# Use accuracy() function to identify common accuracy measures
round(accuracy(train.season.pred, valid.ts), 3)
#Accuracy on entire data set
round(accuracy(train.season$fitted, Housing.ts), 3)
## FIT REGRESSION MODEL WITH linear TREND AND SEASONALITY: MODEL 5.
## FORECAST AND PLOT DATA, AND MEASURE ACCURACY.
# Use tslm() function to create linear trend and seasonal model.
train.ltrend.season <- tslm(train.ts ~ trend + season)
# See summary of linear trend and seasonality model and associated parameters.
summary(train.ltrend.season)
# Apply forecast() function to make predictions for ts with
# trend and seasonality data in validation set.
train.ltrend.season.pred <- forecast(train.ltrend.season, h = nValid, level = 0)
# Plot ts data, trend and seasonality data, and predictions for validation period.
plot(train.ltrend.season.pred,
xlab = "Time", ylab = "Housing starts (in 000s)", ylim = c(100, 3000), bty = "l",
xlim = c(1959, 2025), main = "Model with Quadratic Trend and Monthly Seasonality",
flty = 5, lwd = 2)
axis(1, at = seq(1959, 2025, 1), labels = format(seq(1959, 2025, 1)))
lines(train.ltrend.season.pred$fitted, col = "blue", lwd = 2)
lines(valid.ts, col = "black", lty = 1, lwd = 2)
legend(2000,3300, legend = c("Housing starts Time Series",
"Trend and Seasonality Model for Training Data",
"Trend and Seasonality Forecast for Validation Data"),
col = c("black", "blue" , "blue"),
lty = c(1, 1, 5), lwd =c(2, 2, 2), bty = "n")
# Use accuracy() function to identify common accuracy measures
round(accuracy(train.ltrend.season.pred, valid.ts),3)
#Accuracy on entire data set
round(accuracy(train.ltrend.season$fitted, Housing.ts), 3)
## FIT REGRESSION MODEL WITH QUADRATIC TREND AND SEASONALITY: MODEL 6.
## FORECAST AND PLOT DATA, AND MEASURE ACCURACY.
# Use tslm() function to create quadratic trend and seasonal model.
train.trend.season <- tslm(train.ts ~ trend + I(trend^2) + season)
# See summary of quadratic trend and seasonality model and associated parameters.
summary(train.trend.season)
# Apply forecast() function to make predictions for ts with
# trend and seasonality data in validation set.
train.trend.season.pred <- forecast(train.trend.season, h = nValid, level = 0)
# Plot ts data, trend and seasonality data, and predictions for validation period.
plot(train.trend.season.pred,
xlab = "Time", ylab = "Housing starts (in 000s)", ylim = c(100, 3000), bty = "l",
xlim = c(1959, 2025), main = "Model with Quadratic Trend and Monthly Seasonality",
flty = 5, lwd = 2)
axis(1, at = seq(1959, 2025, 1), labels = format(seq(1959, 2025, 1)))
lines(train.trend.season.pred$fitted, col = "blue", lwd = 2)
lines(valid.ts, col = "black", lty = 1, lwd = 2)
legend(2000,3300, legend = c("Housing starts Time Series",
"Trend and Seasonality Model for Training Data",
"Trend and Seasonality Forecast for Validation Data"),
col = c("black", "blue" , "blue"),
lty = c(1, 1, 5), lwd =c(2, 2, 2), bty = "n")
# Use accuracy() function to identify common accuracy measures
round(accuracy(train.trend.season.pred, valid.ts),3)
#Accuracy on entire data set
round(accuracy(train.trend.season$fitted, Housing.ts), 3)
#Accuracy comparison
round(accuracy(train.lin$fitted, Housing.ts), 3)
round(accuracy(train.expo$fitted, Housing.ts), 3)
round(accuracy(train.quad$fitted, Housing.ts), 3)
round(accuracy(train.season$fitted, Housing.ts), 3)
round(accuracy(train.ltrend.season$fitted, Housing.ts), 3)
round(accuracy(train.trend.season$fitted, Housing.ts), 3)
Housing.stl <- stl(Housing.ts, s.window = "periodic")
autoplot(Housing.stl, main = "Amtrak Time Series Components")
autocor <- Acf(Housing.ts, lag.max = 12, main = "Autocorrelation for US Housing Starts")
Housing.stl <- stl(Housing.ts, s.window = "periodic")
autoplot(Housing.stl, main = "Housting starts Time Series Components")
# Plot original Housing starts time series data and regression model.
plot(Housing.ts,
xlab = "Time", ylab = "Housing starts (in 000s)", ylim = c(100, 3000), bty = "l",
xaxt = "n", xlim = c(1959, 2025), lwd =2,
main = "Housing starts Series and Regression with Trend and Seasonality")
axis(1, at = seq(1959, 2025, 1), labels = format(seq(1959, 2025, 1)))
lines(reg.trend.seas$fitted, col = "brown", lwd = 2)
lines(reg.trend.seas.pred$mean, col = "green", lty =5, lwd = 2)
legend(2000,3300, legend = c("Housing starts", "Regression",
"Regression Forecast for 60 Periods into Future"),
col = c("black", "brown" , "green"),
lty = c(1, 1, 5), lwd =c(2, 2, 2), bty = "n")
# Plot regression residuals data and trailing MA based on residuals.
plot(reg.trend.seas.res,
xlab = "Time", ylab = "Housing starts (in 000s)", ylim = c(-500, 500), bty = "l",
xaxt = "n", xlim = c(1959, 2025), lwd =2,
main = "Regression Residuals and Trailing MA for Residuals, k =12")
axis(1, at = seq(1959, 2025, 1), labels = format(seq(1959, 2025, 1)))
lines(ma.trailing.res_12, col = "blue", lwd = 2, lty = 1)
lines(ma.trailing.res_12.pred$mean, col = "blue", lwd = 2, lty = 5)
legend(2000, 3300, legend = c("Regresssion Residuals", "Trailing MA for Residuals, k=12",
"Trailing MA Forecast for 60 Periods into Future"),
col = c("black", "blue", "blue"),
lty = c(1, 1, 5), lwd =c(2, 2, 2), bty = "n")
plot(reg.trend.seas.res,
xlab = "Time", ylab = "Housing starts (in 000s)", ylim = c(-1000, 1000), bty = "l",
xaxt = "n", xlim = c(1959, 2025), lwd =2,
main = "Regression Residuals and Trailing MA for Residuals, k =12")
axis(1, at = seq(1959, 2025, 1), labels = format(seq(1959, 2025, 1)))
lines(ma.trailing.res_12, col = "blue", lwd = 2, lty = 1)
lines(ma.trailing.res_12.pred$mean, col = "blue", lwd = 2, lty = 5)
legend(2000, 3300, legend = c("Regresssion Residuals", "Trailing MA for Residuals, k=12",
"Trailing MA Forecast for 60 Periods into Future"),
col = c("black", "blue", "blue"),
lty = c(1, 1, 5), lwd =c(2, 2, 2), bty = "n")
plot(reg.trend.seas.res,
xlab = "Time", ylab = "Housing starts (in 000s)", ylim = c(-2000, 2000), bty = "l",
xaxt = "n", xlim = c(1959, 2025), lwd =2,
main = "Regression Residuals and Trailing MA for Residuals, k =12")
axis(1, at = seq(1959, 2025, 1), labels = format(seq(1959, 2025, 1)))
lines(ma.trailing.res_12, col = "blue", lwd = 2, lty = 1)
lines(ma.trailing.res_12.pred$mean, col = "blue", lwd = 2, lty = 5)
legend(2000, 3300, legend = c("Regresssion Residuals", "Trailing MA for Residuals, k=12",
"Trailing MA Forecast for 60 Periods into Future"),
col = c("black", "blue", "blue"),
lty = c(1, 1, 5), lwd =c(2, 2, 2), bty = "n")
reg.trend.seas <- tslm(Housing.ts ~ trend + I(trend^2) + season)
summary(reg.trend.seas)
ses.orig <- ets(Housing.ts, model = "ANN", alpha = 0.2)
ses.orig
# Use forecast() function to make predictions using this SES model with alpha = 0.2
# and 60 periods into the future.
# Show predictions in tabular format.
ses.orig.pred <- forecast(ses.orig, h = 60, level = 0)
ses.orig.pred
## SIMPLE EXPONENTIAL SMOOTHING WITH ORIGINAL DATA AND OPTIMAL ALPHA.
# Create simple exponential smoothing (SES) for Housing data with optimal alpha.
# Use ets() function with model = "ANN", i.e., additive error(A), no trend (N),
# & no seasonality (N). Use optimal alpha to fit SES over the original data.
ses.opt <- ets(Housing.ts, model = "ANN")
ses.opt
# Use forecast() function to make predictions using this SES model with optimal alpha
# and 60 periods into the future.
# Show predictions in tabular format
ses.opt.pred <- forecast(ses.opt, h = 60, level = 0)
ses.opt.pred
plot(ses.opt.pred,
xlab = "Time", ylab = "Housing starts (in 000s)", ylim = c(100, 3000), bty = "l",
xaxt = "n", xlim = c(1959, 2025), lwd = 2,
main = "Original Data and SES Optimal Forecast, Alpha = 0.6534",
flty = 5)
axis(1, at = seq(1959, 2025, 1), labels = format(seq(1959, 2025, 1)))
lines(ses.opt.pred$fitted, col = "blue", lwd = 2)
round(accuracy(ses.opt.pred$fitted, Housing.ts),3)
HW.ZZZ <- ets(Housing.ts, model = "ZZZ")
HW.ZZZ # Model appears to be (M, Ad, N), with alpha = 0.5663 and gamma = 0.0802.
plot(HW.ZZZ.pred,
xlab = "Time", ylab = "Housing starts (in 000s)", ylim = c(100, 3000), bty = "l",
xaxt = "n", xlim = c(1959, 2025), lwd = 2,
main = "Holt-Winter's Model with Automated Selection of Model Options and Forecast for Future Periods",
flty = 5)
axis(1, at = seq(1959, 2025, 1), labels = format(seq(1959, 2025, 1)))
lines(HW.ZZZ.pred$fitted, col = "blue", lwd = 2)
length <- length(Housing.ts)
HW.ZZZ.pred <- forecast(HW.ZZZ, h = 60 , level = c(0, 95))
HW.ZZZ.pred
HW.ZZZ.pred$fitted
plot(HW.ZZZ.pred,
xlab = "Time", ylab = "Housing starts (in 000s)", ylim = c(100, 3000), bty = "l",
xaxt = "n", xlim = c(1959, 2025), lwd = 2,
main = "Holt-Winter's Model with Automated Selection of Model Options and Forecast for Future Periods",
flty = 5)
axis(1, at = seq(1959, 2025, 1), labels = format(seq(1959, 2025, 1)))
lines(HW.ZZZ.pred$fitted, col = "blue", lwd = 2)
plot(train.lin.pred,
xlab = "Time", ylab = "Housing starts (in 000s)", ylim = c(100, 3000), bty = "l",
xlim = c(1959, 2025), main = "Linear Trend for Training and Validation Data", flty = 2)
axis(0, at = seq(1959, 2020, 1), labels = format(seq(1959, 2020, 1)) )
lines(train.lin.pred$fitted, col = "blue", lwd = 2)
lines(valid.ts, col = "black", lty = 1)
legend(2000,3300, legend = c("Housing starts Time Series", "Linear Regression for Training Data",
"Linear Forecast for Validation Data"),
col = c("black", "blue" , "blue"),
lty = c(1, 1, 5), lwd =c(2, 2, 2), bty = "n")
plot(train.lin.pred,
xlab = "Time", ylab = "Housing starts (in 000s)", ylim = c(100, 3000), bty = "l",
xlim = c(1959, 2025), main = "Linear Trend for Training and Validation Data", flty = 2)
axis(0, at = seq(1959, 2020, 1), labels = format(seq(1959, 2020, 1)) )
lines(train.lin.pred$fitted, col = "blue", lwd = 2)
lines(valid.ts, col = "black", lty = 1)
legend(2000,3100, legend = c("Housing starts Time Series", "Linear Regression for Training Data",
"Linear Forecast for Validation Data"),
col = c("black", "blue" , "blue"),
lty = c(1, 1, 5), lwd =c(2, 2, 2), bty = "n")
train.expo <- tslm(train.ts ~ trend, lambda = 0)
# See summary of exponential trend model and associated parameters.
summary(train.expo)
# Apply forecast() function to make forecast using exponential
# trend for validation period.
train.expo.pred <- forecast(train.expo, h = nValid, level = 0)
# Plot ts data, exponential and linear trends, and
# respective forecasts for validation period.
plot(train.expo.pred,
xlab = "Time", ylab = "Housing starts (in 000s)", ylim = c(100, 3000), bty = "l",
xlim = c(1959, 2025), main = "Linear and Exponential Regression Trends")
axis(0, at = seq(1959, 2025, 1), labels = format(seq(1959, 2025, 1)))
lines(train.expo.pred$fitted, col = "blue", lwd = 2)
lines(train.lin.pred$fitted, col = "brown", lwd = 2, lty = 3)
lines(train.lin.pred$mean, col = "brown", lwd = 2, lty = 3)
lines(valid.ts, col = "black", lty = 1)
lines(train.ts, col = "black", lty = 1)
legend(2000,3300, legend = c("Housing starts Time Series",
"Exponentail Trend for Training and Validdation Data",
"Linear Trend for Training and Validation Data"),
col = c("black", "blue" , "brown"),
lty = c(1, 1, 3), lwd =c(2, 2, 2), bty = "n")
plot(train.expo.pred,
xlab = "Time", ylab = "Housing starts (in 000s)", ylim = c(100, 3000), bty = "l",
xlim = c(1959, 2025), main = "Linear and Exponential Regression Trends")
axis(0, at = seq(1959, 2025, 1), labels = format(seq(1959, 2025, 1)))
lines(train.expo.pred$fitted, col = "blue", lwd = 2)
lines(train.lin.pred$fitted, col = "brown", lwd = 2, lty = 3)
lines(train.lin.pred$mean, col = "brown", lwd = 2, lty = 3)
lines(valid.ts, col = "black", lty = 1)
lines(train.ts, col = "black", lty = 1)
legend(2000,3100, legend = c("Housing starts Time Series",
"Exponentail Trend for Training and Validdation Data",
"Linear Trend for Training and Validation Data"),
col = c("black", "blue" , "brown"),
lty = c(1, 1, 3), lwd =c(2, 2, 2), bty = "n")
train.quad <- tslm(train.ts ~ trend + I(trend^2))
# See summary of quadratic trend model and associated parameters.
summary(train.quad)
# Apply forecast() function to make predictions for ts data in
# validation set.
train.quad.pred <- forecast(train.quad, h = nValid, level = 0)
# Plot ts data, regression with quadratic trend and forecast for validation period.
plot(train.quad.pred,
xlab = "Time", ylab = "Housing starts (in 000s)", ylim = c(100, 3000), bty = "l",
xlim = c(1959, 2025), main = "Quadratic Trend for Training and Validation Data",
flty = 2)
axis(1, at = seq(1959, 2025, 1), labels = format(seq(1959, 2025, 1)) )
lines(train.quad.pred$fitted, col = "blue", lwd = 2)
lines(valid.ts, col = "black", lty = 1)
legend(2000,3100, legend = c("Housing starts Time Series", "Quadratic Trend for Training Data",
"Quadratic Forecast for Validation Data"),
col = c("black", "blue" , "blue"),
lty = c(1, 1, 5), lwd =c(2, 2, 2), bty = "n")
train.season <- tslm(train.ts ~ season)
# See summary of seasonal model and associated parameters.
summary(train.season)
# Apply forecast() function to make predictions for ts with
# seasonality data in validation set.
train.season.pred <- forecast(train.season, h = nValid, level = 0)
# Plot ts data, regression model with seasonality, and forecast for validation period.
plot(train.season.pred,
xlab = "Time", ylab = "Housing starts (in 000s)", ylim = c(100, 3000), bty = "l",
xlim = c(1959, 2025), main = "Model with Seasonality for Training and Validation Data",
flty = 5)
axis(1, at = seq(1959, 2025, 1), labels = format(seq(1959, 2025, 1)))
lines(train.season.pred$fitted, col = "blue", lwd = 2)
lines(valid.ts, col = "black", lty = 1)
legend(2000,3100, legend = c("Housing starts Time Series", "Seasonality Model for Training Data",
"Seasonality Forecast for Validation Data"),
col = c("black", "blue" , "blue"),
lty = c(1, 1, 5), lwd =c(2, 2, 2), bty = "n")
train.ltrend.season <- tslm(train.ts ~ trend + season)
# See summary of linear trend and seasonality model and associated parameters.
summary(train.ltrend.season)
# Apply forecast() function to make predictions for ts with
# trend and seasonality data in validation set.
train.ltrend.season.pred <- forecast(train.ltrend.season, h = nValid, level = 0)
# Plot ts data, trend and seasonality data, and predictions for validation period.
plot(train.ltrend.season.pred,
xlab = "Time", ylab = "Housing starts (in 000s)", ylim = c(100, 3000), bty = "l",
xlim = c(1959, 2025), main = "Model with Quadratic Trend and Monthly Seasonality",
flty = 5, lwd = 2)
axis(1, at = seq(1959, 2025, 1), labels = format(seq(1959, 2025, 1)))
lines(train.ltrend.season.pred$fitted, col = "blue", lwd = 2)
lines(valid.ts, col = "black", lty = 1, lwd = 2)
legend(2000,3100, legend = c("Housing starts Time Series",
"Trend and Seasonality Model for Training Data",
"Trend and Seasonality Forecast for Validation Data"),
col = c("black", "blue" , "blue"),
lty = c(1, 1, 5), lwd =c(2, 2, 2), bty = "n")
train.trend.season <- tslm(train.ts ~ trend + I(trend^2) + season)
# See summary of quadratic trend and seasonality model and associated parameters.
summary(train.trend.season)
# Apply forecast() function to make predictions for ts with
# trend and seasonality data in validation set.
train.trend.season.pred <- forecast(train.trend.season, h = nValid, level = 0)
# Plot ts data, trend and seasonality data, and predictions for validation period.
plot(train.trend.season.pred,
xlab = "Time", ylab = "Housing starts (in 000s)", ylim = c(100, 3000), bty = "l",
xlim = c(1959, 2025), main = "Model with Quadratic Trend and Monthly Seasonality",
flty = 5, lwd = 2)
axis(1, at = seq(1959, 2025, 1), labels = format(seq(1959, 2025, 1)))
lines(train.trend.season.pred$fitted, col = "blue", lwd = 2)
lines(valid.ts, col = "black", lty = 1, lwd = 2)
legend(2000,3100, legend = c("Housing starts Time Series",
"Trend and Seasonality Model for Training Data",
"Trend and Seasonality Forecast for Validation Data"),
col = c("black", "blue" , "blue"),
lty = c(1, 1, 5), lwd =c(2, 2, 2), bty = "n")
train.lin <- tslm(train.ts ~ trend)
# See summary of linear trend model and associated parameters.
summary(train.lin)
train.expo <- tslm(train.ts ~ trend, lambda = 0)
# See summary of exponential trend model and associated parameters.
summary(train.expo)
train.quad <- tslm(train.ts ~ trend + I(trend^2))
# See summary of quadratic trend model and associated parameters.
summary(train.quad)
train.season <- tslm(train.ts ~ season)
# See summary of seasonal model and associated parameters.
summary(train.season)
train.ltrend.season <- tslm(train.ts ~ trend + season)
# See summary of linear trend and seasonality model and associated parameters.
summary(train.ltrend.season)
train.trend.season <- tslm(train.ts ~ trend + I(trend^2) + season)
# See summary of quadratic trend and seasonality model and associated parameters.
summary(train.trend.season)
his.ar1 <- Arima(Housing.ts, order = c(1,0,0))
summary(his.ar1)
trend.season <- tslm(Housing.ts ~ trend + I(trend^2) + season)
# Apply forecast() function to make predictions with quadratic trend and seasonal
# model into the future 60 months.
trend.season.pred <- forecast(trend.season, h = 12, level = 0)
trend.season.pred
# Use Arima() function to fit AR(1) model for regression residuals.
# The ARIMA model order of order = c(1,0,0) gives an AR(1) model.
# Use forecast() function to make prediction of residuals into the future 12 months.
residual.ar1 <- Arima(trend.season$residuals, order = c(1,0,0))
residual.ar1.pred <- forecast(residual.ar1, h = 12, level = 0)
# Use Acf() function to identify autocorrealtion for the residual of residuals
# and plot autocorrelation for different lags
Acf(residual.ar1$residuals, lag.max = 12,
main = "Autocorrelation for Housing starts Residuals of Residuals for Entire Data Set")
# Identify forecast for the future 12 periods as sum of quadratic trend and seasonal model
# and AR(1) model for residuals.
trend.season.ar1.pred <- trend.season.pred$mean + residual.ar1.pred$mean
trend.season.ar1.pred
# Create a data table with quadratic trend and seasonal forecast for 12 future periods,
# AR(1) model for residuals for 12 future periods, and combined two-level forecast for
# 12 future periods.
table.df <- data.frame(trend.season.pred$mean,
residual.ar1.pred$mean, trend.season.ar1.pred)
names(table.df) <- c("Reg.Forecast", "AR(1)Forecast","Combined.Forecast")
table.df
residual.ar1 <- Arima(trend.season$residuals, order = c(1,0,0))
residual.ar1.pred <- forecast(residual.ar1, h = 12, level = 0)
Acf(residual.ar1$residuals, lag.max = 12,
main = "Autocorrelation for Housing starts Residuals of Residuals for Entire Data Set")
residual.ar1 <- Arima(trend.season$residuals, order = c(2,0,0))
residual.ar1.pred <- forecast(residual.ar1, h = 12, level = 0)
Acf(residual.ar1$residuals, lag.max = 12,
main = "Autocorrelation for Housing starts Residuals of Residuals for Entire Data Set")
residual.ar1 <- Arima(trend.season$residuals, order = c(3,0,0))
residual.ar1.pred <- forecast(residual.ar1, h = 12, level = 0)
Acf(residual.ar1$residuals, lag.max = 12,
main = "Autocorrelation for Housing starts Residuals of Residuals for Entire Data Set")
residual.ar1 <- Arima(trend.season$residuals, order = c(4,0,0))
residual.ar1.pred <- forecast(residual.ar1, h = 12, level = 0)
Acf(residual.ar1$residuals, lag.max = 12,
main = "Autocorrelation for Housing starts Residuals of Residuals for Entire Data Set")
residual.ar1 <- Arima(trend.season$residuals, order = c(6,0,0))
residual.ar1.pred <- forecast(residual.ar1, h = 12, level = 0)
Acf(residual.ar1$residuals, lag.max = 12,
main = "Autocorrelation for Housing starts Residuals of Residuals for Entire Data Set")
residual.ar1 <- Arima(trend.season$residuals, order = c(12,0,0))
residual.ar1.pred <- forecast(residual.ar1, h = 12, level = 0)
Acf(residual.ar1$residuals, lag.max = 12,
main = "Autocorrelation for Housing starts Residuals of Residuals for Entire Data Set")
residual.ar1 <- Arima(trend.season$residuals, order = c(1,0,0))
residual.ar1.pred <- forecast(residual.ar1, h = 12, level = 0)
Acf(residual.ar1$residuals, lag.max = 8,
main = "Autocorrelation for Housing starts Residuals of Residuals for Entire Data Set")
residual.ar1 <- Arima(trend.season$residuals, order = c(2,0,0))
residual.ar1.pred <- forecast(residual.ar1, h = 12, level = 0)
Acf(residual.ar1$residuals, lag.max = 8,
main = "Autocorrelation for Housing starts Residuals of Residuals for Entire Data Set")
residual.ar1 <- Arima(trend.season$residuals, order = c(3,0,0))
residual.ar1.pred <- forecast(residual.ar1, h = 12, level = 0)
Acf(residual.ar1$residuals, lag.max = 8,
main = "Autocorrelation for Housing starts Residuals of Residuals for Entire Data Set")
residual.ar1 <- Arima(trend.season$residuals, order = c(4,0,0))
residual.ar1.pred <- forecast(residual.ar1, h = 12, level = 0)
Acf(residual.ar1$residuals, lag.max = 8,
main = "Autocorrelation for Housing starts Residuals of Residuals for Entire Data Set")
residual.ar1 <- Arima(trend.season$residuals, order = c(6,0,0))
residual.ar1.pred <- forecast(residual.ar1, h = 12, level = 0)
Acf(residual.ar1$residuals, lag.max = 8,
main = "Autocorrelation for Housing starts Residuals of Residuals for Entire Data Set")
residual.ar1 <- Arima(trend.season$residuals, order = c(8,0,0))
residual.ar1.pred <- forecast(residual.ar1, h = 12, level = 0)
Acf(residual.ar1$residuals, lag.max = 8,
main = "Autocorrelation for Housing starts Residuals of Residuals for Entire Data Set")
arima.seas <- Arima(Housing.ts, order = c(1,1,1),
seasonal = c(1,1,1))
summary(arima.seas)
auto.arima <- auto.arima(Housing.ts)
summary(auto.arima)
round(accuracy(arima.seas.pred$fitted, Housing.ts), 3)
round(accuracy(auto.arima.pred$fitted, Housing.ts), 3)
# Use arima() function to fit seasonal ARIMA(1,1,1)(1,1,1) model
# for entire data set.
# use summary() to show auto ARIMA model and its parameters for entire data set.
arima.seas <- Arima(Housing.ts, order = c(1,1,1),
seasonal = c(1,1,1))
summary(arima.seas)
# Apply forecast() function to make predictions for future 12 months
arima.seas.pred <- forecast(arima.seas, h = 12, level = 0)
arima.seas.pred
## FIT AUTO ARIMA MODELS FOR ENTIRE DATA SET.
# Use auto.arima() function to fit ARIMA model for entire data set.
# use summary() to show auto ARIMA model and its parameters for entire data set.
auto.arima <- auto.arima(Housing.ts)
summary(auto.arima)
# Apply forecast() function to make predictions for ts with
# auto ARIMA model for the future 12 months.
auto.arima.pred <- forecast(auto.arima, h = 12, level = 0)
auto.arima.pred
round(accuracy(arima.seas.pred$fitted, Housing.ts), 3)
round(accuracy(auto.arima.pred$fitted, Housing.ts), 3)
ma.trailing_2.pred <- forecast(ma.trailing_2, h=24, level = 0)
ma.trailing_2.pred
plot(ma.trailing_2.pred,
xlab = "Time", ylab = "Housing starts (in 000s)", ylim = c(100, 3000), bty = "l",
xaxt = "n", xlim = c(1959, 2025), lwd = 2,
main = "Trailing MA Model with window width 2 Forecast for Future Periods",
flty = 5)
axis(1, at = seq(1959, 2025, 1), labels = format(seq(1959, 2025, 1)))
lines(ma.trailing_2.pred$fitted, col = "blue", lwd = 2)
lines(c(2017 - 17, 2017 - 17), c(0, 3000))
lines(c(2018, 2018), c(0, 3000))
text(1979, 2700, "Training")
text(2009, 2700, "Validation")
text(2024, 2700, "Future")
arrows(2017 - 18, 2600, 1960, 2600, code = 3, length = 0.1,
lwd = 1, angle = 30)
arrows(2017 - 16, 2600, 2017, 2600, code = 3, length = 0.1,
lwd = 1, angle = 30)
arrows(2020, 2600, 2029, 2600, code = 3, length = 0.1,
lwd = 1, angle = 30)
